# 코드 리뷰 내용
## ContentMain 부분 -- input 타입을 배열의 반복문으로 만들면...

 01 질문 내용 html
<ul class="options" v-if="dropdownOpen">
    <li v-for="d in options" :key="d.question" @click="selectOption(d)" >
        <span class="material-symbols-outlined">{{ d.question_img }}</span>
        {{ d.question }}
    </li>
</ul>
...
02 전체 질문 콘텐츠 input html
<div  v-for="type in input_type" :key="type.value">
    <div  v-if="selectedOption.value == type.value">
            <input :type="type.type" :value="type.text"  :disabled="type.disabled === 'true' ? true : false">
    </div>
 </div>
...
03 스크립트에서 
  setup()   {
                const options = reactive([
                    { question: '단답형', question_img: 'notes',value:'ShortAnswer' },
                    { question: '장문형', question_img: 'subject' ,value:'Long'},
                    { question: '객관식질문', question_img: 'radio_button_checked',value:'MultipleChoiceQuestions' },
                    { question: '체크박스', question_img: 'check_box',value:'CheckBox' },
                    { question: '파일업로드', question_img: 'cloud_upload',value:'FileUpload' },
                ]);
                const selectedOption = ref(options[0]);
                const dropdownOpen = ref(false);//모달창
                const toggleDropdown = () => {
                    dropdownOpen.value = !dropdownOpen.value;
                };
                const selectOption = (option) => {
                    selectedOption.value = option;
                    dropdownOpen.value = false;
                };
                const input_type  = ([
                    { value:'ShortAnswer',text:'단답형 텍스트',type:'text',icon:'',disabled:'true'},
                    { value:'Long',text:'장문형 텍스트',type:'text',icon:'',disabled:'true'},
                    { value:'MultipleChoiceQuestions',text:'옵션1',type:'text',icon:'circle' ,disabled:'false' },
                    { value:'CheckBox',text:'옵션1',type:'text',icon:'square' ,disabled:'false' },
                    { value:'FileUpload',text:'',type:'file',icon:'' ,disabled:'true' },
                ]);
                return { options, selectedOption, dropdownOpen, toggleDropdown, selectOption ,input_type,
                radio_option,add_radio,radioOptionCount,add_radio_option,remove_radio_option,
                check_option,add_check,checkOptionCount,add_check_option,remove_check_option,
                img_file,img_reader,fileChange,
                changeName,input_first
                };
            }

GPT -  요소들을 v-for로 순회하며 표시하고자 하고, 각 요소에 대해 input_first 값을 변경하면 해당 값이 반영되지 않는 문제가 있습니다. 
v-for는 계속 반복문으로 값을 출력해준다.
전체 질문 콘텐츠를 
<input :type="type.type" :value="type.text"  :disabled="type.disabled === 'true' ? true : false">

배열로 가져오는 것은 좋은 시도 였으나 따로 만들기를 추천



########################
########################
########################
#######전체코드###########
<template>
        <article class="c_content">
            <div class="cc_top">
                <!--질문제목 -->
                <input class="cc_qustion" type="text" placeholder="제목없는 질문">
             
                <!--설명 이미지-->
                <a class="cc_image" href="#">
                    <label><span class="material-symbols-outlined">image</span>
                    <input type="file" hidden  @change="fileChange" >
                    </label>
                </a>
                <!--질문유형-->
                <div class="selectWrap">
                    <ul class="select_header" @click="toggleDropdown">
                        <li class="selected_option">
                            <p>
                                <span class="material-symbols-outlined">{{ selectedOption.question_img }}</span>
                                {{ selectedOption.question }}
                            </p>
                            <span class="material-symbols-outlined">expand_more</span>
                        </li>
                    </ul>
                    <!-- 질문내용 -->
                    <ul class="options" v-if="dropdownOpen">
                        <li v-for="d in options" :key="d.question" @click="selectOption(d)" >
                            <span class="material-symbols-outlined">{{ d.question_img }}</span>
                            {{ d.question }}
                        </li>
                    </ul>
                </div>
            </div>
            <!-- 설명이미지  -->
            <div class="cc_img" >
                <div v-for="(url, index) in img_file" :key="index">
                    <img :src="url" :alt="url" style="width:200px" />
                </div>
            </div>
            <div class="cc_middle">
                <div  v-for="type in input_type" :key="type.value">
                    <div  v-if="selectedOption.value == type.value">
                        <div class="inputType">
                            <!-- 전체 질문 콘텐츠 input -->
                            <span class="material-symbols-outlined">{{type.icon}}</span>
                            <p>
                                <input :type="type.type" :value="type.text"  :disabled="type.disabled === 'true' ? true : false">
                            </p>
                        </div>
                        <!-- 라디오질문 -->
                        <div v-if="type.value=='MultipleChoiceQuestions'">
                            <!-- 옵션추가 -->
                            <ul>
                                <li class="inputType" v-for="d in radio_option.radio_data" :key="d">
                                    <span class="material-symbols-outlined">circle</span>
                                    <p>
                                        <input type="text" :value="d"  >
                                    </p>
                                    <span class="material-symbols-outlined optiondelete" @click="remove_radio_option(index)">close</span>
                                </li>
                            </ul>
                            <!-- 기타추가 -->
                            <div class="inputType" v-if="add_radio==true">
                                <span class="material-symbols-outlined">circle</span>
                                <p>
                                    <input type="text" value="기타..." disabled>
                                </p>
                                    <span class="material-symbols-outlined"  @click="add_radio = false">close</span>
                            </div>
                            <div class="inputType" >
                                <p>
                                    <span class="material-symbols-outlined">circle</span>
                                    <button @click="add_radio_option()">옵션추가</button>
                                    <span class="add_etc" v-if="add_radio==false" >
                                        또는 <button @click="add_radio = true">'기타'추가</button>
                                    </span>
                                </p>
                            </div>
                        </div>
                        <!-- 체크박스질문 -->
                       <div v-if="type.value=='CheckBox'">
                            <!-- 옵션추가 -->
                            <ul>
                                <li class="inputType" v-for="c in check_option.check_data" :key="c">
                                    <span class="material-symbols-outlined">square</span>
                                    <p>
                                        <input type="text" :value="c"  >
                                    </p>
                                    <span class="material-symbols-outlined optiondelete" @click="remove_check_option(index)">close</span>
                                </li>
                            </ul>
                            <!-- 기타추가 -->
                            <div class="inputType" v-if="add_check==true" >
                                <p>
                                    <span class="material-symbols-outlined">square</span>
                                    <input type="text" value="기타..." disabled>
                                    <span class="material-symbols-outlined" @click="add_check = false">close</span>
                                </p>
                            </div>
                            <div class="inputType" >
                                <p>
                                    <span class="material-symbols-outlined">square</span>
                                    <button @click="add_check_option()">옵션추가</button>
                                    <span class="add_etc" v-if="add_check==false">
                                        또는 <button @click="add_check= true" >'기타'추가</button>
                                    </span>
                                </p>
                            </div>
                       </div>
                        

                    </div>
                    
                </div>    
            </div>
            <div class="cc_bottom">
                <p><span class="material-symbols-outlined">content_copy</span></p>
                <p><span class="material-symbols-outlined">delete</span></p>
                <p class="necessary">필수</p>
                <p><span class="material-symbols-outlined">more_vert</span></p>
                
            </div>
        </article>
</template>
<script>
import { reactive, ref } from "vue";
    export default{
        //Options APi
        data(){
            return{
                add_radio :false,add_check: false
            }
        },
        setup() {
            const options = reactive([
                { question: '단답형', question_img: 'notes',value:'ShortAnswer' },
                { question: '장문형', question_img: 'subject' ,value:'Long'},
                { question: '객관식질문', question_img: 'radio_button_checked',value:'MultipleChoiceQuestions' },
                { question: '체크박스', question_img: 'check_box',value:'CheckBox' },
                { question: '파일업로드', question_img: 'cloud_upload',value:'FileUpload' },
            ]);
            const selectedOption = ref(options[0]);
            const dropdownOpen = ref(false);//모달창
            const toggleDropdown = () => {
                dropdownOpen.value = !dropdownOpen.value;
            };
            const selectOption = (option) => {
                selectedOption.value = option;
                dropdownOpen.value = false;
            };
            const input_type  = ([
                { value:'ShortAnswer',text:'단답형 텍스트',type:'text',icon:'',disabled:'true'},
                { value:'Long',text:'장문형 텍스트',type:'text',icon:'',disabled:'true'},
                { value:'MultipleChoiceQuestions',text:'옵션1',type:'text',icon:'circle' ,disabled:'false' },
                { value:'CheckBox',text:'옵션1',type:'text',icon:'square' ,disabled:'false' },
                { value:'FileUpload',text:'',type:'file',icon:'' ,disabled:'true' },
            ]);
            //이미지 
            let img_file =ref([])
            const img_reader = new FileReader();
            const fileChange=(e) =>{
                const selectedFile = e.target.files[0];
                   if (selectedFile instanceof Blob) {
                        img_reader.addEventListener('load', () => {
                            img_file.value.push(img_reader.result)
                            //console.log(img_reader.result);
                        });
                        img_reader.readAsDataURL(selectedFile);
           

                    } else {
                        console.error('Selected file is not a Blob.');
                    }
             }
            //라디오옵션
            const add_radio = ref(false);//기타 상태
            const radio_option = reactive({
                radio_data :[], 
            })
            let radioOptionCount = 2;
            const add_radio_option =() =>{
                radio_option.radio_data.push("옵션"+radioOptionCount);
                radioOptionCount++;
                console.log(radio_option.radio_data)
            };
            const  remove_radio_option  = (index) => {
                radio_option.radio_data.splice(index, 1);
            };
            //
            //체크박스옵션
            const add_check = ref(false);//기타 상태
            const check_option = reactive({
                check_data :[], 
            })
            let checkOptionCount = 2;
            const add_check_option =() =>{
                check_option.check_data.push("옵션"+checkOptionCount);
                checkOptionCount++;
                //console.log(check_option.check_data)
            };
            const  remove_check_option  = (index) => {
                check_option.check_data.splice(index, 1);
            };
            const input_first = ref('');
            const changeName=(e)=> {
                // input_first.value = e;
                
                console.log(e )
            }

            return { options, selectedOption, dropdownOpen, toggleDropdown, selectOption ,input_type,
            radio_option,add_radio,radioOptionCount,add_radio_option,remove_radio_option,
            check_option,add_check,checkOptionCount,add_check_option,remove_check_option,
            img_file,img_reader,fileChange,
            changeName,input_first
            };
        },
        methods: {
             
        },
    }

</script>
<style scoped>
    @import url("../index.css");
    /* 상단 */
    .cc_top{display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap;}
    .cc_qustion{min-width:300px;width:60%;font-family: 'docs-Roboto';font-weight: 400;font-size: 12pt;line-height: 1.5;letter-spacing: 0;}
    .selectWrap{position: relative;}
    .select_header{min-width:200px;width:30%;padding:10px; border: 1px solid #dadce0;border-radius:4px;}
    .select_header li{display:flex; justify-content:space-between;align-items:center;}
    .select_header li p{margin:0;display:flex;align-items:center;}
    .select_header li p span{margin-right: 8px;}
    .options{width:100%; position:absolute;top:0;left:0; min-width: 209px;box-shadow: 0 1px 2px 0 rgba(60,64,67,.3), 0 2px 6px 2px rgba(60,64,67,.15);background: #fff;}
    .options li{padding:8px;}
    .options li:hover{background-color: rgba(0,0,0,.2);}
    /*  중간 */
    .inputType{display:flex;align-items:center;}
    .inputType>p{width:80%;display:flex;align-items:center;}
    .inputType>p input{width:100%;}
    /* 하단 */
    .cc_bottom{margin-top:20px; display: flex;justify-content:end; align-items:center;border-top:1px solid #dadce0;height: 64px;}
    .cc_bottom p{width:48px;height:48px;display:flex;justify-content:center;align-items:center;}
    .cc_bottom p span{display:block;}


</style>